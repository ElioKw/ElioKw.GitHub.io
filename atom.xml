<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://eliokw.github.io</id>
    <title>𝔼𝕝𝕚𝕠.𝕂𝕨</title>
    <updated>2022-10-20T14:16:05.619Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://eliokw.github.io"/>
    <link rel="self" href="https://eliokw.github.io/atom.xml"/>
    <subtitle>𝔅𝔢𝔩𝔦𝔢𝔣</subtitle>
    <logo>https://eliokw.github.io/images/avatar.png</logo>
    <icon>https://eliokw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 𝔼𝕝𝕚𝕠.𝕂𝕨</rights>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 數據編碼 No.6]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-6/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-6/">
        </link>
        <updated>2022-10-19T12:54:39.000Z</updated>
        <content type="html"><![CDATA[<h3>雙向碼：</h3>
<h4>每一位都有一個電平轉換，一高一低，必須翻轉<br>
具有定時檢測錯誤的功能(曼切斯特碼和差分曼切斯特碼)</h4><br>
<h3>曼切斯特碼：</h3>
<h4>雙向碼之一，在每個比特中有一個跳變，第一個編碼自定義</h4><br>
<h3>差分曼切斯特碼：</h3>
<h4>雙向碼之一，有跳變代表0，無跳變代表1</h4><br>
<h3>兩種曼切斯特碼的優點：</h3>
<h4>將始終和數據包含在信號數據流，也稱同步碼<br>
編碼效率低：每個碼元都要調製為兩個不同的電平，而調製速率是碼元速率的兩倍，對信道的帶寬提出更高的要求。例：當數據傳輸為100Mbps，需要200Mhz的脈衝，編碼速率是50%發送數據流每4bits，先使用不歸零碼(NRZ-I) ，編碼成5bit，多一位用於解決同步問題</h4><br>
<h3>各種編碼效率</h3>
<h4>曼碼和差分曼碼效率50%，用於以太網
4B/SB效率80%，用於百兆以太網
8B/10B 效率80%，用於幹兆以太網
64B/66B效率97%，用於萬兆以太網</h4>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 傳輸介質 No.5]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-5/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-5/">
        </link>
        <updated>2022-10-19T12:44:48.000Z</updated>
        <content type="html"><![CDATA[<div class="scope" style="margin: 0 auto; width: 380px;">
<h3>雙絞綫：</h3><h4>8根銅導綫每2根扭在一起(百兆：4根，千兆：8根)<br><br></h4>
<h3>分類：</h3><h4>直通綫/交叉綫，屏蔽雙絞綫和非屏蔽雙絞線<br><br></h4>
<h3>光纖：利用光在玻璃或塑料纖維中得到全反射原理</h3>
<h4>①光傳導損耗比電纜傳導的損耗低得多，適合長距離傳輸<br>
②特點：重量輕，體積小，傳輸遠，容量大，抗電磁性<br></h4>
<h3>光綫分類：</h3>
<h4>單模光纖：<br>介質為激光二極管。只允許一種模式在其中傳播，極寬的帶寬，適用於大容量，長距離的光纖通信(貴)；5~10um<br>多模光纖：<br>介質為發光二極管。允許多種模式光信號傳播，僅用於較小容量，短距離的光纖傳輸通信(便宜)；50um</h4>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 信道延遲 No.4]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-4/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-4/">
        </link>
        <updated>2022-10-18T12:13:01.000Z</updated>
        <content type="html"><![CDATA[<div class="scope" style="margin: 0 auto; width: 380px;">
<h3>誤碼率：<br><br></h3>
<h4>衡量數據通信系統在正常工作情況下傳輸可靠性的指標。誤碼率越小越好，通信可靠越高<br><br>
誤碼率一般要求低於10⁻¹⁶；Pe=Ne/N；Ne表示出錯數，N表示傳送總數<br><br>
信道延遲：與源端和宿端距離有關，已於具體信道中的信號傳播速率有關</h4><br><br>
<h3>光速：300m/us = 300000km/s 電纜：200m/us = 200000km/s</h3><br><br>
<h3>發送數據時間 = ①綫路延遲 + ②調製延遲<br><br>
①綫路延遲 = 傳輸距離（路上跑的時間）<br><br>
②調製延遲 = 數據幀大小/速率（排隊上車時間）<br><br>
</h3>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 信道特性 No.3]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-3/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-3/">
        </link>
        <updated>2022-10-05T04:39:28.000Z</updated>
        <content type="html"><![CDATA[<div class="scope" style="margin: 0 auto; width: 380px;">
<h3>通信的目的：傳遞信息<br><br>
通信中產生和發送信息的一端叫&nbsp;信源<br><br>
通信中接受信息的一端叫&nbsp;信宿<br><br>
通信中的綫路稱爲&nbsp;信道<br><br><br>
信源 -> 變換 -> 信道 -> 變換 -> 信宿</h3><br><br><br>
<h4>信號：①模擬信號 -> 連續的模擬信號<br><br>
<h4>&nbsp;&nbsp;&nbsp;②數字信號 -> 離散的數字信號</h4><br><br><br>
<h3>信道帶寬 W</h3>
<h4>&nbsp;&nbsp;&nbsp;③模擬信道：W = f2-f1(Hz)<br>&nbsp;&nbsp;&nbsp;f2表示信道通過的最高頻率，f1信道通過的最低頻率</h4><br>
<h4>&nbsp;&nbsp;&nbsp;④數字信道：W = 最大傳輸速率(bit/s)<br>&nbsp;&nbsp;&nbsp;帶寬為信道能夠達到的最大傳輸速率<br>&nbsp;&nbsp;&nbsp;傳輸速率指每秒能夠傳輸二進制數據位數</h4><br><br>
<h3>碼元：一個數字脈衝成爲一個碼元(即時鐘周期的信號)</h3>
<h3>碼元速率：單位時間内傳輸的碼元個數<br>碼元寬度(脈衝周期)為T<br>碼元速率：波特率 B=1/T(波特，Baud)</h3>
<h3>一個碼元携帶信息量(n)&nbsp;碼元種類數(N)&nbsp;&nbsp;n=log₂N</h3><br><br><br>
<h3>①尼奎斯特定理：在一個沒有噪聲的環境信道中<br>信道帶寬：W&nbsp;最大碼元速率：B=2W(Baud)<br>極速數據速率為：R=Blog₂N=2Wlog₂N</h3>
<h3>②香農定理：一個噪聲信道的極限速率和帶寬之間的關係<br>極速速率公式：dB=10log₁₀ S/N</h3>
<h3>③W：帶寬&nbsp;S：信號平均功率<br>N：噪聲平均功率&nbsp;S/N：信噪比<br>極速速率公式：dB=10log₁₀ S/N</h3>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 計算機網絡體系架構 No.2]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-2/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-2/">
        </link>
        <updated>2022-09-30T12:10:45.000Z</updated>
        <content type="html"><![CDATA[<div class="scope" style="margin: 0 auto; width: 380px;">
<h3>應用層：各種應用程序，協議<br><br>
表示層：數據和信息的語法展緩内碼，數據壓縮解壓，加密解<br><br>
會話層：通信雙方指定通信方式，並創建，注銷會話<br><br>
傳輸層：提供可靠或者不可靠的端對端傳輸<br><br>
網絡層：邏輯尋址；路由選擇<br><br>
數據鏈路層：將分明封裝成幀；提供節點到節點傳輸；差錯控制<br><br>
物理層：在媒介上傳輸比特流；提供機械和電氣規約</h3><br><br>
<h4>①可靠傳輸：TCP</h4>
<h4>②不可靠傳輸：UDP</h4>
<h4>③邏輯尋址：IP</h4>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[📒 𝑁𝑒𝑡-𝐸𝑛𝑔𝑖𝑛𝑒𝑒𝑟 計算機網絡概論 No.1]]></title>
        <id>https://eliokw.github.io/post/Net-Engineer-1/</id>
        <link href="https://eliokw.github.io/post/Net-Engineer-1/">
        </link>
        <updated>2022-09-26T12:45:48.000Z</updated>
        <content type="html"><![CDATA[<div class="scope" style="margin: 0 auto; width: 380px;">
<h3>計算機網絡：</h3><h4>計算機技術與通信技術的結合      ICT=IT+CT</h4>
<h3>網絡拓撲：</h3><h4>星型，環型，樹型，全連接型，總綫型，不規則型</h4>
<br><br><br><br>
<h3>局域網：</h3>
<h4>① 地理範圍：室内，校園内部<br></h4>
<h4>② 所有者和運營者：單位所有和運營<br></h4>
<h4>③ 互聯和通信方式：共享介質，分組廣播<br></h4>
<h4>④ 數據速率：每秒幾十兆位至每秒幾百兆位<br></h4>
<h4>⑤ 誤碼率：最小<br></h4>
<h4>⑥ 拓撲結構-規則結構：總綫型，星型和環型<br></h4>
<h4>⑦ 主要應用：分佈式數據處理，辦公自動化<br></h4>
<h3>城域網：</h3>
<h4>① 地理範圍：建築物之間，城區内<br></h4>
<h4>② 所有者和運營者：幾個單位有或公用<br></h4>
<h4>③ 互聯和通信方式：共享介質，分組廣播<br></h4>
<h4>④ 數據速率：每秒幾兆位至每秒幾十兆位<br></h4>
<h4>⑤ 誤碼率：中等<br></h4>
<h4>⑥ 拓撲結構-規則結構：總綫型，星型和環型<br></h4>
<h4>⑦ 主要應用：LAN互聯，綜合聲音<br>視頻和數據業務<br></h4>
<p><br><br><br><h3>廣域網：</h3></p>
<h4>① 地理範圍：國内<br></h4>
<h4>② 所有者和運營者：通信運營公司所有<br></h4>
<h4>③ 互聯和通信方式：共享介質，分組交換<br></h4>
<h4>④ 數據速率：每秒幾兆位至每秒幾十千位<br></h4>
<h4>⑤ 誤碼率：較大<br></h4>
<h4>⑥ 拓撲結構-規則結構：不規則的網狀結構<br></h4>
<h4>⑦ 主要應用：遠程數據傳輸</h4>
<br>
<br><br><br><h3>OSI參考模型&nbsp;&nbsp;(由上到下)</h3>
<h4>1、應用層&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;數據&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;進程號<br></h4>
<h4>2、表示層<br></h4>
<h4>3、會話層<br></h4>
<h4>4、傳輸層&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;數據段&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;端口號<br></h4>
<h4>5、網絡層&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;數據包&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IP地址<br></h4>
<h4>6、數據鏈路層&nbsp;&nbsp;&nbsp;&nbsp;數據幀&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAC地址  <br></h4>
<h4>7、物理層&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特流<br></h4>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🖥️Web安全 - 常見漏洞]]></title>
        <id>https://eliokw.github.io/post/Net-Sec-2/</id>
        <link href="https://eliokw.github.io/post/Net-Sec-2/">
        </link>
        <updated>2022-06-06T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>一、暴力破解</h3>
<h4>1、概述</h4>
​ 「暴力破解」是一攻擊具手段，在web攻擊中，一般會使用這種手段對應用系統的認證信息進行獲取。其過程就是使用大量的認證信息在認證接口進行嘗試登錄，直到得到正確的結果。為了提高效率，暴力破解一般會使用帶有字典的工具來進行自動化操作。</br>
理論上來說，大多數系統都是可以被暴力破解的，只要攻擊者有足夠強大的計算能力和時間，所以斷定一個系統是否存在暴力破解漏洞，其條件也不是絕對的。我們說一個web應用系統存在暴力破解漏洞，一般是指該web應用系統沒有采用或者采用了比較弱的認證安全策略，導致其被暴力破解的「可能性」變的比較高。</br>
<h4>2、基於表單的暴力破解</h4>
​ 條件：用戶沒有任何安全驗證，可直接抓包進行暴力破解。</br>
<h4>3、驗證碼繞過</h4>
<p><a href="https://imgtu.com/i/O3kKXQ"><img src="https://s1.ax1x.com/2022/05/08/O3kKXQ.png" alt="O3kKXQ.png" border="0" /></a></p>
<p>驗證碼繞過（on server）：驗證碼校驗在服務端完成，但是驗證碼存在時效性，這個時候我們可以在這個時效內進行抓包實現短時間內的驗證碼繞過。</br><br>
​ 驗證碼繞過（on client）：在前端進行驗證碼的校驗，這個時候駛入正確的驗證碼提交，進行抓包後，我們通過修改密碼和賬號發現我們不需要再對驗證碼進行修改，從而繞過了驗證碼，實現暴力破解。</br></p>
<h4>4、token防爆破？</h4>
<p><a href="https://imgtu.com/i/O3krA1"><img src="https://s1.ax1x.com/2022/05/08/O3krA1.png" alt="O3krA1.png" border="0" /></a></p>
<p>由於token值輸出在了前端的源碼中，容易被獲取，因此也就失去了防爆破的意義。我們可以在每次暴力破解的過程中獲取到前端頁面生成的token的值，從而實現暴力破解。</br></p>
<h4>5、安全策略</h4>
​ 1.是否要求用戶設置復雜的密碼；</br>
​ 2.是否每次認證都使用安全的驗證碼（想想你買火車票時輸的驗證碼～）或者手機app；</br>
​ 3.是否對嘗試登錄的行為進行判斷和限製（如：連續5次錯誤登錄，進行賬號鎖定或IP地址鎖定等）；</br>
​ 4.是否采用了雙因素認證；</br>
<h3>二、XSS</h3>
<h4>1、基本概念和原理介紹</h4>
跨站點腳本攻擊，指攻擊者通過篡改網頁，嵌入惡意腳本程序，在用戶瀏覽網頁時，控製用戶瀏覽器進行惡意操作的一種攻擊方式。</br>
Cross-Site Scripting 簡稱為「CSS」，為避免與前端疊成樣式表的縮寫"CSS"沖突，故又稱XSS。一般XSS可以分為如下幾種常見類型：</br>
1.反射性XSS</br>
交互的數據一般不會被存在在數據庫裏面，一次性，所見即所得，一般出現在查詢</br>
​ 2.存儲型XSS</br>
交互的數據會被存在在數據庫裏面，永久性存儲，一般出現在留言板，註冊等頁面。</br>
3.DOM型XSS</br>
不與後臺服務器產生數據交互，是一種通過DOM操作前端代碼輸出的時候產生的問題，一次性也屬於反射型。</br>
<p><a href="https://imgtu.com/i/O3kfnH"><img src="https://s1.ax1x.com/2022/05/08/O3kfnH.png" alt="O3kfnH.png" border="0" /></a></p>
<p>形成原因<br>
形成xss漏洞的主要原因是程序對輸入輸出的控製不夠嚴格，導致「精心設計」的腳本輸入後，在輸出到前端時被瀏覽器當作有效代碼執行從而產生危害。</br></p>
<h4>2、跨站腳本漏洞測試流程</h4>
（1）在目標站點上找到輸入點，比如查詢接口，留言板等。</br>
（2）輸入一組"特殊字符+唯一識別字符"，點擊提交後，查看返回的源碼，是否有做對應的處理。</br>
（3）通過搜索定位唯一字符，結合唯一字符前後語法確認是否可以執行js的條件（構造閉合）。</br>
（4）提交構造的腳本代碼（以及各種繞過姿勢），看是否可以成功執行，如果成功執行則說明存在現在xss漏洞；</br>
TIPS：</br>
（1）一般查詢接口容易出現反射型xss，留言板容易出現存儲型xss；</br>
（2）由於後臺可能存在過濾措施，構成的script可能會被過濾掉，二無法生效，或者環境限製了執行（瀏覽器）。</br>
（3）通過變化不同的script，嘗試繞過後臺過濾機製。</br>
<h4>3、安全策略</h4>
（1）輸入時：嚴格過濾單引號，雙引號，尖括號。</br>
​ 記住一點：不要相信任何輸入的內容。例如用戶名只能以字母和數字組合，手機號碼只能有 11 位且全部為數字，否則即為非法。這些格式檢查類似於白名單效果，限製輸入允許的字符，讓一下特殊字符的攻擊失效。</br>
（2）輸出時：對單引號，雙引號，尖括號等轉化為HTML實體。</br>
<h3>三、csrf</h3>
<h4>1、原理</h4>
​ CSRF（Cross-Site Request Forgery，跨站點偽造請求）是一種網絡攻擊方式，該攻擊可以在受害者毫不知情的情況下以受害者名義偽造請求發送給受攻擊站點，從而在未授權的情況下執行在權限保護之下的操作，具有很大的危害性。</br>
<h4>2、如何確認一個web系統純在CRSF漏洞</h4>
（1）對目標網站增刪查改的地方進行標記，並觀察其邏輯，判斷是否可以被偽造</br>
–比如修改管理員賬號時，並不需要驗證舊密碼，導致請求容易被偽造；</br>
–比如對於敏感信息的修改並沒有使用安全的token驗證，導致請求容易被偽造；</br>
（2）確認憑證的有效日期（這個問題會提高CRSF被利用的概率）</br>
–雖然退出並關閉了瀏覽器，但cookie仍然有效，或者session並沒有及時過期，導致CRSF攻擊變的簡單。</br>
<h4>3、防禦措施</h4>
（1）驗證HTTP Referer字段</br>
（2）在請求地址中添加token並驗證，後端生成token發送到前端，前端提交到後端在進行驗證。</br>
（3）在HTTP頭中自定義屬性並驗證</br>
（4）在服務端區嚴格區分好POST與GET的數據請求（建議不要使用GET請求進行持久性操作）</br>
（5）使用驗證碼或者密碼確認方式進行</br>
<h3>四、SQL註入</h3>
<h4>1、概述</h4>
<h4>2、形成原因</h4>
什麽是SQL註入攻擊</br>
攻擊者在HTTP請求中註入惡意的SQL代碼，服務器使用參數構建數據庫SQL命令時，惡意SQL被一起構造，並在數據庫中執行。</br>
用戶登錄，輸入用戶名 lianggzone，密碼 ‘ or ‘1’=’1 ，如果此時使用參數構造的方式，就會出現</br>
select * from user where name = ‘lianggzone’ and password = ‘’ or ‘1’=‘1’</br>
不管用戶名和密碼是什麽內容，使查詢出來的用戶列表不為空。如何防範SQL註入攻擊使用預編譯的PrepareStatement是必須的，但是一般我們會從兩個方面同時入手。</br>
Web端</br>
1）有效性檢驗。</br>
2）限製字符串輸入的長度。</br>
服務端</br>
1）不用拼接SQL字符串。</br>
2）使用預編譯的PrepareStatement。</br>
3）有效性檢驗。(為什麽服務端還要做有效性檢驗？第一準則，外部都是不可信的，防止攻擊者繞過Web端請求)</br>
4）過濾SQL需要的參數中的特殊字符。比如單引號、雙引號。</br>
<h3>五、RCE</h3>
<h4>1、RCE(remote command/code execute)概述</h4>
RCE漏洞，可以讓攻擊者直接向後臺服務器遠程註入操作系統命令或者代碼，從而控製後臺系統。</br>
遠程系統命令執行</br>
​ 一般出現這種漏洞，是因為應用系統從設計上需要給用戶提供指定的遠程命令操作的接口。</br>
​ 比如我們常見的路由器、防火墻、入侵檢測等設備的web管理界面上一般會給用戶提供一個ping操作的web界面，用戶從web界面輸入目標IP，提交後，後臺會對該IP地址進行一次ping測試，並返回測試結果，而，如果設計者在完成該功能時，沒有做嚴格的安全控製，則可能會導致攻擊者通過該接口提交「意想不到」的命令，從而讓後臺進行執行，從而控製整個後臺服務器。</br>
​ 比如：127.0.0.1 & ipconfig</br>
​ 現在很多的甲方企業都開始實施自動化運維,大量的系統操作會通過"自動化運維平臺"進行操作。在這種平臺上往往會出現遠程系統命令執行的漏洞,不信的話現在就可以找你們運維部的系統測試一下,會有意想不到的"收獲"。</br>
shell_exec() 用於執行用戶傳輸的命令</br>
遠程代碼執行</br>
	 同樣的道理,因為需求設計,後臺有時候也會把用戶的輸入作為代碼的一部分進行執行,也就造成了遠程代碼執行漏洞。不管是使用了代碼執行的函數,還是使用了不安全的反序列化等等。</br>
	 因此，如果需要給前端用戶提供操作類的API接口，一定需要對接口輸入的內容進行嚴格的判斷，比如實施嚴格的白名單策略會是一個比較好的方法。</br>
eval() 用於執行用戶傳輸的代碼</br>
<h3>六、文件包含漏洞</h3>
<h4>1、概述</br></h4>
​ 文件包含，是一個功能。在各種開發語言中都提供了內置的文件包含函數，其可以使開發人員在一個代碼文件中直接包含（引入）另外一個代碼文件。</br>
	 比如 在PHP中，提供了：</br>
	 include(),include_once()</br>
	 require(),require_once()</br>
	 include和require語法是相同的，除了錯誤處理方面：</br>
require會生成指明錯誤（E_COMPLIE_ERROR）並停止腳本；</br>
include只會生成警告（E_WARNING），並且腳本會繼續；</br>
​ 這些文件包含函數，這些函數在代碼設計中被經常使用到。</br>
​ 大多數情況下，文件包含函數中包含的代碼文件是固定的，因此也不會出現安全問題。但是，有些時候，文件包含的代碼文件被寫成了一個變量，且這個變量可以由前端用戶傳進來，這種情況下，如果沒有做足夠的安全考慮，則可能會引發文件包含漏洞。 攻擊著會指定一個「意想不到」的文件讓包含函數去執行，從而造成惡意操作。根據不同的配置環境，文件包含漏洞分為如下兩種情況：</br>
	 **1.本地文件包含漏洞：**僅能夠對服務器本地的文件進行包含，由於服務器上的文件並不是攻擊者所能夠控製的，因此該情況下，攻擊著更多的會包含一些固定的系統配置文件，從而讀取系統敏感信息。很多時候本地文件包含漏洞會結合一些特殊的文件上傳漏洞，從而形成更大的威力。</br>
	 防護措施：設置白名單（if函數用"||"的方式設置）</br>
	 **2.遠程文件包含漏洞：**能夠通過url地址對遠程的文件進行包含，這意味著攻擊者可以傳入任意的代碼，這種情況沒啥好說的，準備掛彩。因此，在web應用系統的功能設計上盡量不要讓前端用戶直接傳變量給包含函數，如果非要這麽做，也一定要做嚴格的白名單策略進行過濾。</br>
​ 前提：需要php.ini配置如下</br>
allow_url_fopen = on //默認打開</br>
Allow_url_include = on //默認關閉</br>
	 危害：可直接傳輸比如一句話木馬等文件，導致客戶機被控製。</br>
<h4>2、防範措施</h4>
（1）在功能設計上盡量不要將文件包含函數對應的文件放給全段進行選擇和操作；</br>
（2）過濾各種…/…/, http:// , https://</br>
（3）配置php.ini配置文件</br>
​ allow_url_fopen=off</br>
	 allow_url_include=off</br>
​ magic_quotes_gpc=on //gpc在</br>
（4）通過白名單策略，進允許包含運行指定的文件，其他的都禁止；</br>
<h3>七、不安全的文件下載和文件上傳</h3>
<h4>1、文件下載</h4>
​ 很多網站都會提供文件下載的功能，即用戶可以點擊下載鏈接，下載到鏈接所對應的文件。但是如果文件下載功能不當，則可能導致攻擊者可以通過構造文件路徑，從未獲取到後臺服務器上的其他敏感文件（又稱：任意文件下載）。</br>
防範措施</br>
（1）對傳入的文件名進行嚴格的過濾和限定</br>
（2）對文件下載的目錄進行嚴格的限定</br>
<h4>2、文件上傳</h4>
因為業務功能需求，很多web站點都有文件上傳的接口，比如：</br>
（1）註冊時上傳頭像圖片（比如jpg，png，gif等）；</br>
（2）上傳文件附件（doc，xsl等）；</br>
而在後臺開發時並沒有對文件上傳的文件功能進行安全考慮或者采用了有缺陷的措施，導致攻擊者可以通過一些手段繞過安全措施從而上傳一些惡意文件（如：一句話木馬）。從而通過對該惡意文件的訪問；來控製整個web後臺。</br>
<h4>3、文件上傳漏洞測試流程</h4>
（1）對文件上傳的地方按照要求上傳文件，查看返回結果（路徑，提示等）</br>
（2）嘗試上傳不同類型的"惡意"文件，比如xx.php文件，分析結果；</br>
（3）查看html源碼，看是否通過js在前端做了上傳限製，可以繞過；</br>
（4）嘗試使用不同的方式進行繞過；黑白名單繞過/MIME類型繞過/目錄0x00截斷繞過等；</br>
（5）猜測或者結合其他漏洞（比如敏感信息泄露）得到木馬路徑，連接測試</br>
<h4>防範措施</h4>
（1）不在前端使用js實施上傳策略</br>
（2）通過服務器對文件上傳進行限製</br>
進行多條組合檢查：比如文件的大小，路徑，拓展名，文件類型，文件完整性，或者設置文件後綴白名單。</br>
對上傳的文件在服務器存儲是進行重命名（指定合理的命名規則）</br>
對服務器上傳文件的目錄進行權限控製（比如只讀），限製執行去權限帶來的危害。</br>
<h3>八、越權漏洞</h3>
	 由於沒有對用戶權限進行嚴格判斷，導致低權限的賬戶（比如普通用戶）可以去完成高權限賬號（比如超級管理員）範圍內的操作。</br>
<h4>1、水平越權</h4>
	 A用戶和B用戶屬於同一級別用戶，但各自不能操作對方個人信息，A用戶如果越權操作B用戶的個人信息的情況稱為平行越權操作。</br>
<h4>2、垂直越權</h4>
	 A用戶權限高於B用戶，B用戶越權操作A用戶權限的情況稱為垂直越權。</br>
<h4>3、修復建議</h4>
驗證一切來自客戶端的參數，重點是和權限相關的參數，比如用戶ID或者角色權限ID等。</br>
session ID 和認證的token做綁定，放在服務器的會話裏，不發送給客戶端。</br>
對於用戶登錄後涉及用戶唯一信息的請求，每次都要驗證檢查所有權，敏感信息頁面加隨機數的參數，防止瀏覽器緩存內容。</br>
把程序分成匿名，授權和管理的區域，通過將角色和數據功能匹配。</br>
不適用參數來區分管理員和普通用戶。</br>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🖥️HTTP超文本傳輸協議]]></title>
        <id>https://eliokw.github.io/post/Net-Sec-1/</id>
        <link href="https://eliokw.github.io/post/Net-Sec-1/">
        </link>
        <updated>2022-04-05T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>請求消息 - request</h3>
<h4>HTTP常見八種請求方式：</h4>
🔗<a href="https://www.cnblogs.com/andy0816/p/15566812.html" οnclick="window.open;return false"> HTTP协议支持的8种请求方法 </a></br>
<h4>HTTP請求的方法：</h4>
HTTP/1.1協議中共定義了八種方法（有時也叫「動作」）,來表明Request-URL指定的資源不同的操作方式
HTTP1.0定義了三種請求方法： GET, POST 和 HEAD方法。
HTTP1.1新增了五種請求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法</br>
但其實我們大部分情況下只用到了GET和POST。如果想設計一個符合RESTful規範的web應用程序,則這六種方法都會用到。不過即使暫時不想涉及REST,了解這六種方法的本質仍然是很有作用的。大家將會發現,原來web也是很簡潔明了的。下面依次說明這六種方法。</br>
1、GET：</br>GET可以說是最常見的了,它本質就是發送一個請求來取得服務器上的某一資源。資源通過一組HTTP頭和呈現據（如HTML文本,或者圖片或者視頻等）返回給客戶端。GET請求中,永遠不會包含呈現數據。</br>
2、HEAD：</br>HEAD和GET本質是一樣的,區別在於HEAD不含有呈現數據,而僅僅是HTTP頭信息。有的人可能覺得這個方法沒什麽用,其實不是這樣的。想象一個業務情景：欲判斷某個資源是否存在,我們通常使用GET,但這裏用HEAD則意義更加明確。</br>
head()方法將HEAD請求發送到指定的url。當您不需要文件的內容時,HEAD請求會完成,但只需要status_code或HTTP標頭。</br>
3、PUT：</br>這個方法比較少見。HTML表單也不支持這個。本質上來講, PUT和POST極為相似,都是向服務器發送數據,但它們之間有一個重要區別,PUT通常指定了資源的存放位置,而POST則沒有,POST的數據存放位置由服務器自己決定。
舉例子：</br>如一個用於提交博文的URL,/addBlog。如果用PUT,則提交的URL會是像這樣的」/addBlog/abc123」,其中abc123就是這個博文的地址。而如果用POST,則這個地址會在提交後由服務器告知客戶端。目前大部分博客都是這樣的。顯然,PUT和POST用途是不一樣的。具體用哪個還取決於當前的業務場景。</br>
4、DELETE：</br>刪除某一個資源。基本上這個也很少見,不過還是有一些地方比如amazon的S3雲服務裏面就用的這個方法來刪除資源。</br>
5、POST：</br>向服務器提交數據。這個方法用途廣泛,幾乎目前所有的提交操作都是靠這個完成。</br>
6、OPTIONS：</br>這個方法很有趣,但極少使用。它用於獲取當前URL所支持的方法。若請求成功,則它會在HTTP頭中包含一個名為「Allow」的頭,值是所支持的方法,如「GET, POST」。</br>
獲取http服務器支持的http請求方法,允許客戶端查看服務器的性能,比如ajax跨域時的預檢等。</br>
JavaScript的XMLHttpRequest對象進行CORS跨域資源共享時,就是使用OPTIONS方法發送嗅探請求,以判斷是否有對指定資源的訪問權限。 允許</br>
7、TRACE,TRACE請求服務器回顯其收到的請求信息,該方法主要用於HTTP請求的測試或診斷。不過這個基本上不會用到,</br>
8、CONNECT方法是HTTP/1.1協議預留的,能夠將連接改為管道方式的代理服務器。通常用於SSL加密服務器的鏈接與非加密的HTTP代理服務器的通信。這個也是用的比較少</br>
我們可以跟數據庫的CRUD增刪改查操作對應起來：</br>
CREATE ：PUT READ：GET UPDATE：POST DELETE：DELETE</br>
這樣一來就實現了HTTP和數據庫操作（其實不光是數據庫,任何數據如文件圖表都是這樣）的完美統一,這也是REST的精髓之一</br>
<h4>常用get，post</h4>
get請求：請求參數在url地址中，url有大小限製（字符數據，只有一次TCP連接）</br>
post請求：請求參數在請求體中，無大小限製（字符，字節數據，根據瀏覽器會有多次TCP連接）</br>
<h4>Host：請求主機域名</h4>
User-Agent：告訴服務器瀏覽器的版本信息，解決兼容性問題</br>
Accept-Encoding：瀏覽器申明自己可以接受的編碼方式</br>
Accept-Language：瀏覽器申明自己可以接受的語言</br>
Cookie：為了辨別用戶身份，進行Session跟蹤而儲存在用戶本地上的數據（通常經過加密），</br>
客戶端計算機暫時或永久保存的信息</br>
<h4>狀態碼</h4>
1xx：服務器接受未完成</br>
2xx：成功 200</br>
3xx：重定向，302 ，304訪問緩存</br>
4xx：客戶端錯誤，404沒有找到對應資源，405請求方法不被允許</br>
5xx：服務器錯誤，500服務器內部出現異常
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🌃卯榫結構]]></title>
        <id>https://eliokw.github.io/post/Daily-4/</id>
        <link href="https://eliokw.github.io/post/Daily-4/">
        </link>
        <updated>2022-03-19T13:10:00.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://imgtu.com/i/O3AmU1"><img src="https://s1.ax1x.com/2022/05/08/O3AmU1.jpg" alt="O3AmU1.jpg" border="0" /></a></p>
<h1 style="font-size: 20px; text-align:center;">木工藝術卯榫</h1>
</br>
<h2 style="font-size: 16px; text-align:center;">來感受下細木工藝的魅力：</h2>
<p><a href="https://imgtu.com/i/O3EuZj"><img src="https://s1.ax1x.com/2022/05/08/O3EuZj.gif" alt="O3EuZj.gif" border="0"></a><br>
</br></p>
<h2 style="font-size: 16px; text-align:center;">三塊帶有不同凹凸程度的長方體，通過組合、鎖定可以形成一個固定的多面體。</h2>
<p><a href="https://imgtu.com/i/O3EmLQ"><img src="https://s1.ax1x.com/2022/05/08/O3EmLQ.gif" alt="O3EmLQ.gif" border="0"></a><br>
</br></p>
<h2 style="font-size: 16px; text-align:center;">它類似與縮小版的房屋腳架，仔細看，在將具有不同凹凸的長方體組合在一起之後，是利用一個小小的圓木體鎖住。</h2>
<p><a href="https://imgtu.com/i/O3EKds"><img src="https://s1.ax1x.com/2022/05/08/O3EKds.gif" alt="O3EKds.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3Eesg"><img src="https://s1.ax1x.com/2022/05/08/O3Eesg.gif" alt="O3Eesg.gif" border="0"></a><br>
</br></p>
<h2 style="font-size: 16px; text-align:center;">而這組則像是一個牆面總共有兩個構件片，一片的一側凸出，而另一片則是以凹進為主，兩片結合在一起便可鎖住，完成一個組件。</h2>
<p><a href="https://imgtu.com/i/O3EZQS"><img src="https://s1.ax1x.com/2022/05/08/O3EZQS.gif" alt="O3EZQS.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3EMon"><img src="https://s1.ax1x.com/2022/05/08/O3EMon.gif" alt="O3EMon.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3Eliq"><img src="https://s1.ax1x.com/2022/05/08/O3Eliq.gif" alt="O3Eliq.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3E1J0"><img src="https://s1.ax1x.com/2022/05/08/O3E1J0.gif" alt="O3E1J0.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3E3WV"><img src="https://s1.ax1x.com/2022/05/08/O3E3WV.gif" alt="O3E3WV.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3E8zT"><img src="https://s1.ax1x.com/2022/05/08/O3E8zT.gif" alt="O3E8zT.gif" border="0"></a><br>
<a href="https://imgtu.com/i/O3Vwng"><img src="https://s1.ax1x.com/2022/05/08/O3Vwng.gif" alt="O3Vwng.gif" border="0"></a><br>
</br></p>
<h2 style="font-size: 16px; text-align:center;">以上這些組件也很有趣，它們是不同大小的長方體，都有不同的凹凸形成，組合在一起之後有的可以直接固定，也有的是只需要幾個小圓木體便可以完成鎖住。</h2>
<a href="https://imgtu.com/i/O3V0BQ"><img src="https://s1.ax1x.com/2022/05/08/O3V0BQ.gif" alt="O3V0BQ.gif" border="0"></a>
</br>
<h2 style="font-size: 16px; text-align:center;">而這個可以算是相對復雜一些的，它是由五個小構件組成的完整體，彼此之間分別鎖定才能完成這個構件的組裝。</h2>
</br>
<!-- <div class="box" style="text-align: center; float: right; font-size: 20px;">
𝑨𝒅𝒅𝒓𝒆𝒔𝒔：<a href="https://google-maps.gosur.com/cn/?ll=22.645769127676914,113.24018699999999&z=12.08012298459565&t=streets" οnclick="window.open;return false" style="color: black
; font-size: 20px;  text-decoration: underline">𝑯𝒐𝒎𝒆 </a>
</div> -->]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🔗H3C《2021年網路安全漏洞態勢報告》]]></title>
        <id>https://eliokw.github.io/post/0Day-1/</id>
        <link href="https://eliokw.github.io/post/0Day-1/">
        </link>
        <updated>2022-02-28T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<div class="box" style="text-align: center;">
<a href="https://mp.weixin.qq.com/s/qG6zaa8LDTKAiBi7UIA9Pg" οnclick="window.open;return false" style="color: black
; font-size: 46px;  text-decoration: underline"> 𝑯<span><i>3</i></span>𝑪 𝑵𝒆𝒕-𝑺𝒆𝒄 𝑹𝒆𝒑𝒐𝒓𝒕 </a>
</div>]]></content>
    </entry>
</feed>